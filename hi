okpackage com.anthem.pdt.common.batch;


import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.anthem.pdt.common.Repo.BundleErrorResponseRepo;
import com.anthem.pdt.common.Repo.PdtRepo;
import com.anthem.pdt.common.batch.dto.BundleErrorResponse;
import com.anthem.pdt.common.entity.FhirBundleErrorResponse;
import com.anthem.pdt.common.entity.FhirBundleSubmissionResponse;

@Service
public class PdtItemService {
	
	private static Logger logger = LoggerFactory.getLogger(PdtItemService.class);
	
	@Autowired
	private PdtRepo pdtRepo;
	
	@Autowired
	private BundleErrorResponseRepo bundleErrorRespRepo;
	
	
	@Autowired
	EntityManager entityManager;
	
	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public List<FhirBundleSubmissionResponse> addingDataIntoDB(List<FhirBundleSubmissionResponse> fhirBundle){
		List<FhirBundleSubmissionResponse> dataAfterSaving=pdtRepo.saveAll(fhirBundle);
		entityManager.flush();
		entityManager.clear();
		return dataAfterSaving;
		
	}

	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public List<FhirBundleErrorResponse> addingErrorDataIntoDB(List<FhirBundleErrorResponse> bundleErrorResponseList){
		List<FhirBundleErrorResponse> dataAfterSaving=bundleErrorRespRepo.saveAll(bundleErrorResponseList);
		entityManager.flush();
		entityManager.clear();
		return dataAfterSaving;
	}
	
	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public FhirBundleErrorResponse addingErrorRecordToDB(FhirBundleErrorResponse bundleErrorResponse){
		FhirBundleErrorResponse dataAfterSaving=bundleErrorRespRepo.save(bundleErrorResponse);
		entityManager.flush();
		entityManager.clear();
		return dataAfterSaving;
	}
	
//	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public void updateRecordStatus(String statusInprogress, String currentTimeStamp, String rsrcId){
		pdtRepo.updateRecordStatus(statusInprogress,currentTimeStamp,rsrcId);
		entityManager.flush();
		entityManager.clear();
	}
	
	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public void updateAllRecordStatus(String statusInprogress, Date currentTimeStamp, List<String> rsrcIds){
		pdtRepo.updateAllRecordStatus(statusInprogress,currentTimeStamp,rsrcIds);
		entityManager.flush();
		entityManager.clear();
	}
	
	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public void updateAllRecordStatuswithBndlID(String statusInprogress, Date currentTimeStamp, String anthmBndlId ,List<String> rsrcIds){
        pdtRepo.updateAllRecordStatuswithBndlID(statusInprogress,currentTimeStamp,anthmBndlId,rsrcIds);
        entityManager.flush();
        entityManager.clear();
      }
	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public void updateFailedbunleids(String yettosubmit,Date currentTimeStamp,List<String> failedBundleId) {
		pdtRepo.updateFailedbunleids(yettosubmit,currentTimeStamp,failedBundleId);
		entityManager.flush();
		entityManager.clear();
	}

	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public void updatePROVAFFLTNTRGRStatus(String status,String rcrdstatus,Date currentTimeStamp,List<String> rsrcIds) {
		pdtRepo.updatePROVAFFLTNTRGRStatus(status,rcrdstatus,currentTimeStamp,rsrcIds);
		entityManager.flush();
		entityManager.clear();
	}
	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public void updateAllorgRecordStatus(String statusInprogress, String statusOrgstatus, Date currentTimeStamp, List<String> provrsrcIds){
		pdtRepo.updateAllorgRecordStatus(statusInprogress,statusOrgstatus,currentTimeStamp,provrsrcIds);
		entityManager.flush();
		entityManager.clear();
	}
	
	@Transactional(propagation = Propagation.REQUIRES_NEW)
	public void updatePROVAFFLTNTRGRSwithBndlID(String status,String rcrdstatus,Date currentTimeStamp,String anthmBndlId,List<String> rsrcIds) {
		pdtRepo.updatePROVAFFLTNTRGRSwithBndlID(status,rcrdstatus,currentTimeStamp,anthmBndlId,rsrcIds);
		entityManager.flush();
		entityManager.clear();
	}

	public void updateAllorgRecordStatuswithBndlID(String statusInprogress, String statusOrgstatus,Date currentTimeStamp, String anthmBndlId ,List<String> rsrcIds){
        pdtRepo.updateAllorgRecordStatuswithBndlID(statusInprogress,statusOrgstatus,currentTimeStamp,anthmBndlId,rsrcIds);
        entityManager.flush();
        entityManager.clear();
      }

}


package com.anthem.pdt.common.custom.writer;
 
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.hl7.fhir.r4.model.Bundle;
import org.hl7.fhir.r4.model.OperationOutcome;
import org.hl7.fhir.r4.model.Bundle.BundleEntryComponent;
import org.hl7.fhir.r4.model.Bundle.BundleEntryRequestComponent;
import org.hl7.fhir.r4.model.Bundle.BundleEntryResponseComponent;
import org.hl7.fhir.r4.model.Bundle.HTTPVerb;
import org.hl7.fhir.r4.model.OperationOutcome.OperationOutcomeIssueComponent;
import org.hl7.fhir.r4.model.Organization;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import com.anthem.pdt.common.Repo.PdtRepo;
import com.anthem.pdt.common.batch.PdtItemService;
import com.anthem.pdt.common.batch.processor.PdtQualificationEntityProcessor;
import com.anthem.pdt.common.constants.Constants;
import com.anthem.pdt.common.custom.processor.BearerTokenCache;
import com.anthem.pdt.common.custom.processor.CustomFhirContext;
import com.anthem.pdt.common.entity.FhirBundleErrorResponse;
import com.anthem.pdt.common.entity.FhirBundleSubmissionResponse;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.parser.IParser;
@Configuration
@Component
public class CustomQualificationWriter implements ItemWriter<Organization> {
	private static Logger logger = LoggerFactory.getLogger(CustomQualificationWriter.class);
	@Autowired
	private PdtItemService pdtItemService;
	
	@Autowired
	private PdtQualificationEntityProcessor pdtQualificationEntityProcessor;
	@Autowired
	private BearerTokenCache tokenCache;
	
	@Value("${provLocation.bundleSize}")
	private int bundleSize;

	@Autowired
	private PdtRepo pdtRepo;
	
	private final JdbcTemplate jdbcTemplate;
	
	public CustomQualificationWriter (JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }
	  
//	  @Autowired
//		private RowMapper<Organization> mapper;
	
 
	public String getBearerToken() {
		return tokenCache.getToken("DYNAMIC_TOKEN");
	}
 
	
	private Bundle createBundle(List<Organization> organizations,List<String> qualResourceIds) {
	    Bundle bundle = new Bundle().setType(Bundle.BundleType.BATCH);
	    bundle.setId("040-"+UUID.randomUUID().toString()+"-Organisation");
	    List<BundleEntryComponent> entryList = new ArrayList<>();

	    for (Organization organization : organizations) {
	    	BundleEntryComponent entryComponent = new BundleEntryComponent();
	        BundleEntryRequestComponent request = new BundleEntryRequestComponent();
	        request.setMethod(HTTPVerb.PUT);
	        request.setUrl("Organization/" + organization.getId());
	        qualResourceIds.add(organization.getId());
	        entryComponent.setFullUrl("http://bpd.bcbs.com/Qualification/" + organization.getId());
	        entryComponent.setResource(organization);
	        entryComponent.setRequest(request);
	        entryList.add(entryComponent);
	    }
	    bundle.setEntry(entryList);
	    return bundle;
	}
	
	@Override
	public void write(List<? extends Organization> organizations) throws Exception {
	    long startTime = System.currentTimeMillis();
	    Date currentDate = new Date();
	    SimpleDateFormat formatter = new SimpleDateFormat(Constants.DATE_FORMAT_dd_MMM_yyyy);
	    String currentTimeStamp = formatter.format(currentDate);
	    List<List<Organization>> chunks = splitIntoChunks(organizations, bundleSize);
	    List<String> qualResourceIds = new ArrayList<>();
	    for (List<Organization> chunk : chunks) {
	        Bundle bundle = createBundle(chunk,qualResourceIds);
	        IParser ip = CustomFhirContext.getInstance().newJsonParser().setPrettyPrint(true);
	        logger.trace(ip.encodeResourceToString(bundle));
	        // Invoke APIs and process DB updates for each chunk
	        invokeAPIsAndProcessDBUpdates(currentTimeStamp ,qualResourceIds ,bundle, ip);
			qualResourceIds.clear();
	    }
	}

	private List<List<Organization>> splitIntoChunks(List<? extends Organization> list, int chunkSize) {
	    List<List<Organization>> chunks = new ArrayList<>();
	    for (int i = 0; i < list.size(); i += chunkSize) {
	        chunks.add(new ArrayList<>(list.subList(i, Math.min(i + chunkSize, list.size()))));
	    }
	    return chunks;
	}

	@Async("QualificationTaskExecuter")
	private void invokeAPIsAndProcessDBUpdates(String currentTimeStamp,List<String> resourceIds, Bundle bundle,
			IParser ip) {
				 logger.trace(Thread.currentThread().getName());
				String bundleId = bundle.getId();
				// Fetch Bearer token using Auth Code
				long startTimeForBearerTokenApi = System.currentTimeMillis();
				logger.trace(bundleId);
			    // String accessToken = pdtProvLocationProcessor.fetchBearerToken();
				String accessToken = getBearerToken();
				long timeTakenForBearerToken = System.currentTimeMillis() - startTimeForBearerTokenApi;
				logger.info("TimetakenToFetchBearerToken is:" + timeTakenForBearerToken);
				String jsonMainData = ip.encodeResourceToString(bundle);
				// fireRequestUsingOktaClient(accessToken, jsonMainData);
				// Post Data to FHIR Server
				long startTimeForFHIRAPI = System.currentTimeMillis();
				logger.info("Request data ---------"+jsonMainData);
				ResponseEntity<String> responseEntityStr = pdtQualificationEntityProcessor.fireRequestUsigRestTemplate(accessToken,
						jsonMainData);
					long timeTakenForFHIR = System.currentTimeMillis() - startTimeForFHIRAPI;
					logger.info("TimetakenForFHIRAPI is: " + timeTakenForFHIR);
					// here we have to add success insert to trigger table
					logger.info("--------------- response body -------"+responseEntityStr.getBody());
					logger.trace(responseEntityStr.toString());	
					List<FhirBundleSubmissionResponse> fhirBundle = new ArrayList<FhirBundleSubmissionResponse>();
					Bundle parsedBundle = new Bundle();
					List<FhirBundleErrorResponse> bundleErrorResponseList = new ArrayList<FhirBundleErrorResponse>();
					if ((Constants.successStatusCode) == (responseEntityStr.getStatusCodeValue())) {
						parsedBundle = ip.parseResource(Bundle.class, responseEntityStr.getBody());
						pdtItemService.updateAllRecordStatus(Constants.STATUS_SUCCESS, new Date(),resourceIds);
					}
	
					else if((Constants.StatusCode422) == (responseEntityStr.getStatusCodeValue()))
					{
						FhirContext ctx = FhirContext.forR4();
						OperationOutcome operationOutcome = ctx.newJsonParser().parseResource(OperationOutcome.class,responseEntityStr.getBody()); 
						List<String> errorResourceIds = new ArrayList<>();
						for(OperationOutcomeIssueComponent issue : operationOutcome.getIssue()) {
							FhirBundleErrorResponse bundleError = new FhirBundleErrorResponse();
							String diagnostics = issue.getDiagnostics();
							int diagnosticsparseIndex = diagnostics.indexOf('(');
							String diagnosticsSubString = (diagnosticsparseIndex != -1) ?diagnostics.substring(0,diagnosticsparseIndex):diagnostics;
							String rscIds = null;
							if(!issue.getLocation().isEmpty()) {
							String location = issue.getLocation().get(0).getValue();
							int fisrtBackLashIndex = location.indexOf('/');
							int secondBackLashIndex = location.indexOf('/',fisrtBackLashIndex+1);
							int endIndex = location.indexOf("*",secondBackLashIndex+1);
							rscIds = location.substring(secondBackLashIndex+1,endIndex);
							errorResourceIds.add(rscIds);
							}
							bundleError.setAnthemBundleId(bundleId);
							bundleError.setBcbsaBundleId(Constants.NA);
							bundleError.setProviderResourseId(Constants.NA);
							bundleError.setErrorResourseId(rscIds); 
							bundleError.setErrorResourseType("Organization");
							bundleError.setBundleErrorResourseCode(String.valueOf(responseEntityStr.getStatusCodeValue()));
							bundleError.setBundleErrorResourseStatusCode(Constants.status_422);
							bundleError.setErrorResponseJson(responseEntityStr.getBody());
							bundleError.setBundleErrorResponseReasonDesc(diagnosticsSubString); 
							bundleError.setBundleRequestJson(jsonMainData);
							bundleError.setBundleErrorResponseDetail(Constants.NA);
							bundleError.setBundleSubmissionDtm(currentTimeStamp);
							bundleError.setErrorRtrvlDtm(currentTimeStamp);
							bundleError.setCrtcUserId(Constants.USER_ID);
							bundleError.setUpdtUserId(Constants.USER_ID);
							bundleError.setClvrlfLoadId(bundleError.hashCode());
							bundleErrorResponseList.add(bundleError);
						}
						if(!CollectionUtils.isEmpty(errorResourceIds)&&!CollectionUtils.isEmpty(bundleErrorResponseList) ) {
							pdtItemService.updateAllRecordStatus(Constants.STATUS_FAILED, new Date(), errorResourceIds);
							pdtItemService.addingErrorDataIntoDB(bundleErrorResponseList);
							logger.error(bundleErrorResponseList + "Error data saved successfully for bundle Id " + bundleId);
							}
						List<String> filteredLctnIds = resourceIds.stream().filter(id->!errorResourceIds.contains(id)).collect(Collectors.toList());
						if(!CollectionUtils.isEmpty(filteredLctnIds)) {
							pdtItemService.updateAllRecordStatus(Constants.STATUS_YETTOSUBMIT, new Date(), filteredLctnIds);
						}
							
					}
					else if ((Constants.failed504Code) == (responseEntityStr.getStatusCodeValue())) {
						int j = 0;
						FhirBundleErrorResponse bundleError = new FhirBundleErrorResponse();
						for (String locationIds : resourceIds) {
							bundleError.setAnthemBundleId(bundleId);
							bundleError.setBcbsaBundleId(Constants.NA);
							bundleError.setProviderResourseId(Constants.NA);
							bundleError.setErrorResourseId(locationIds); 
							bundleError.setErrorResourseType(bundle.getEntry().get(0).getId());
							bundleError.setBundleErrorResourseCode(String.valueOf(responseEntityStr.getStatusCodeValue()));
							bundleError.setBundleErrorResourseStatusCode(Constants.ERROR);
							bundleError.setBundleErrorResponseReasonDesc(Constants.NA); 
							bundleError.setBundleErrorResponseDetail(Constants.NA);
							bundleError.setBundleSubmissionDtm(currentTimeStamp);
							bundleError.setErrorRtrvlDtm(currentTimeStamp);
							bundleError.setCrtcUserId(Constants.USER_ID);
							bundleError.setUpdtUserId(Constants.USER_ID);
							bundleError.setClvrlfLoadId(bundleError.hashCode());
							if(j==1)
							{
								bundleError.setBundleRequestJson(jsonMainData);
								bundleError.setErrorResponseJson(responseEntityStr.getBody());
							}
							j++;
							bundleErrorResponseList.add(bundleError);
						}
						if(!CollectionUtils.isEmpty(resourceIds)&&!CollectionUtils.isEmpty(bundleErrorResponseList)) {
						pdtItemService.updateAllRecordStatuswithBndlID(Constants.FAILED_504_CODE, new Date(),bundleId,resourceIds);
						pdtItemService.addingErrorDataIntoDB(bundleErrorResponseList);
						}
						} 
					else {
					FhirBundleErrorResponse bundleError = new FhirBundleErrorResponse();
					bundleError.setAnthemBundleId(bundleId);
					bundleError.setBcbsaBundleId(Constants.NA);
					bundleError.setErrorResourseId(bundle.getEntry().get(0).getId()); 
					bundleError.setProviderResourseId(Constants.NA);
					bundleError.setErrorResourseType(bundle.getEntry().get(0).getId());
					bundleError.setBundleErrorResourseCode(String.valueOf(responseEntityStr.getStatusCodeValue()));
					bundleError.setBundleErrorResourseStatusCode(Constants.ERROR);
					bundleError.setErrorResponseJson(responseEntityStr.getBody());
					bundleError.setBundleErrorResponseReasonDesc(responseEntityStr.getStatusCode().getReasonPhrase()); 
					bundleError.setBundleRequestJson(jsonMainData);
					bundleError.setBundleErrorResponseDetail(Constants.NA);
//					Date currentDate =new Date();
//					SimpleDateFormat formatter=new SimpleDateFormat(Constants.DATE_FORMAT_dd_MMM_yyyy);  
//					String currentTimeStamp= formatter.format(currentDate);
					bundleError.setBundleSubmissionDtm(currentTimeStamp);
					bundleError.setErrorRtrvlDtm(currentTimeStamp);
					bundleError.setCrtcUserId(Constants.USER_ID);
					bundleError.setUpdtUserId(Constants.USER_ID);
					bundleError.setClvrlfLoadId(bundleError.hashCode());
					bundleErrorResponseList.add(bundleError);
					logger.error(bundleErrorResponseList + "Error data saved successfully for bundle Id " + bundleId);
					pdtItemService.addingErrorRecordToDB(bundleError);
//					 pdtItemService.updateAllRecordStatus(Constants.STATUS_FAILED, new Date(),
//					 resourceIds);
				}
				
				List<BundleEntryComponent> entryList = parsedBundle.getEntry();
				int i = 0;
				for (BundleEntryComponent a : entryList) {
					BundleEntryResponseComponent res = new BundleEntryResponseComponent();
					res = a.getResponse();
					FhirBundleSubmissionResponse fhir = new FhirBundleSubmissionResponse();
					fhir.setAnthemBundleId(bundleId);
					fhir.setBcbsaBundleId(parsedBundle.getId());
					fhir.setMasterProviderId(Constants.NA);
					String[] status = res.getStatus().split(" ");
					fhir.setBundleResponseCode(status[0]);
					fhir.setBundleResponseDtl(status[1]);
					fhir.setBundleSubmissionDtm(new Date());
					fhir.setBundleResponseDtm(new Date());
					fhir.setCreatedUserId(Constants.USER_ID);
					fhir.setUpdatedUserId(Constants.USER_ID);
					String[] resourceId = res.getLocation().split("/");
					fhir.setRsrcId(resourceId[1]);
					fhir.setClvrlfLoadId((long) fhir.hashCode());
//					if (i == 0) {
//						fhir.setBundleRequestJson(jsonMainData);`
//						fhir.setBundleResponseJson(responseEntityStr.getBody());
//					}
//					i++;
					fhirBundle.add(fhir);
					// logger.info(fhir.getRsrcId()+" "+fhir.getClvrlfLoadId());
				}
				if (!fhirBundle.isEmpty()) {
					fhirBundle = pdtItemService.addingDataIntoDB(fhirBundle);
					// logger.info(fhirBundle + "saved successfully");
				}

				
				
}		}
	



//


package com.anthem.pdt.common.batch.dto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class QualificationEntity {
	
	private String qualResourceId;
	private String schlName;
	private String provBoardCertificationIssueorg;
	public String toString() {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(this);
    }


	public String getQualResourceId() {
		return qualResourceId;
	}
	public void setQualResourceId(String qualResourceId) {
		this.qualResourceId = qualResourceId;
	}
	public String getSchlName() {
		return schlName;
	}
	public void setSchlName(String schlName) {
		this.schlName = schlName;
	}
	public String getProvBoardCertificationIssueorg() {
		return provBoardCertificationIssueorg;
	}
	public void setProvBoardCertificationIssueorg(String provBoardCertificationIssueorg) {
		this.provBoardCertificationIssueorg = provBoardCertificationIssueorg;
	}
	
}
package com.anthem.pdt.common.batch.dto;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

public class QualificationEntityTest {

    private QualificationEntity qualificationEntity;

    @Before
    public void setUp() {
        qualificationEntity = new QualificationEntity();
    }

    @Test
    public void testGetSetQualResourceId() {
        String testId = "12345";
        qualificationEntity.setQualResourceId(testId);
        assertEquals("QualResourceId should match the set value", testId, qualificationEntity.getQualResourceId());
    }

    @Test
    public void testGetSetSchlName() {
        String testName = "Test School";
        qualificationEntity.setSchlName(testName);
        assertEquals("SchlName should match the set value", testName, qualificationEntity.getSchlName());
    }

    @Test
    public void testSetQualResourceIdNull() {
        qualificationEntity.setQualResourceId(null);
        assertNull("QualResourceId should be null", qualificationEntity.getQualResourceId());
    }

    @Test
    public void testSetSchlNameNull() {
        qualificationEntity.setSchlName(null);
        assertNull("SchlName should be null", qualificationEntity.getSchlName());
    }

    @Test
    public void testSetSchlNameEmpty() {
        qualificationEntity.setSchlName("");
        assertEquals("SchlName should be empty", "", qualificationEntity.getSchlName());
    }

    @Test
    public void testSetQualResourceIdEmpty() {
        qualificationEntity.setQualResourceId("");
        assertEquals("QualResourceId should be empty", "", qualificationEntity.getQualResourceId());
    }
}
