else if (Constants.StatusCode422 == responseEntityStr.getStatusCodeValue()) {
    FhirContext ctx = FhirContext.forR4();
    OperationOutcome operationOutcome = ctx.newJsonParser().parseResource(OperationOutcome.class, responseEntityStr.getBody()); 
    
    List<String> errorResourceIds = new ArrayList<>();
    List<String> diagnostics = new ArrayList<>(); // List to store diagnostics

    for (OperationOutcomeIssueComponent issue : operationOutcome.getIssue()) {
        String diagnosticsString = issue.getDiagnostics();

        // Logic to extract and process diagnostics
        int diagnosticsParseIndex = diagnosticsString.indexOf('(');
        String diagnosticsSubstring = (diagnosticsParseIndex != -1) ? diagnosticsString.substring(0, diagnosticsParseIndex) : diagnosticsString;

        // Extract resource IDs from location
        String resourceId = null;
        if (!issue.getLocation().isEmpty()) {
            String location = issue.getLocation().get(0).getValue();
            int firstSlashIndex = location.indexOf('/');
            int secondSlashIndex = location.indexOf('/', firstSlashIndex + 1);
            int endIndex = location.indexOf("*", secondSlashIndex + 1);
            resourceId = location.substring(secondSlashIndex + 1, endIndex);
            
            // Handle empty resource ID scenario
            if (resourceId.isEmpty()) {
                // Additional diagnostics handling logic
                diagnosticsString = issue.getDiagnostics();
                int orgPrefix = diagnosticsString.indexOf("040");
                if (orgPrefix != -1) {
                    int orgSuffix = diagnosticsString.indexOf("ProviderOrganiz");
                    if (orgSuffix != -1) {
                        String res = diagnosticsString.substring(orgPrefix, orgSuffix);
                    }
                }
            }
            errorResourceIds.add(resourceId); // Add resourceId to list
        }

        diagnostics.add(diagnosticsSubstring); // Add diagnostics to list
    }

    // After processing all issues, you can use 'diagnostics' and 'errorResourceIds' as needed
    for (String diagnostic : diagnostics) {
        // Perform any additional logic with diagnostics here
        System.out.println("Diagnostic: " + diagnostic);
    }
}
