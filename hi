else if ((Constants.StatusCode422) == (responseEntityStr.getStatusCodeValue())) {
    FhirContext ctx = FhirContext.forR4();
    OperationOutcome operationOutcome = ctx.newJsonParser().parseResource(OperationOutcome.class, responseEntityStr.getBody());
    List<String> errorResourceIds = new ArrayList<>();
    
    for (OperationOutcomeIssueComponent issue : operationOutcome.getIssue()) {
        FhirBundleErrorResponse bundleError = new FhirBundleErrorResponse();
        
        // Extract resource ID from location field
        if (!issue.getLocation().isEmpty()) {
            String location = issue.getLocation().get(0).getValue();
            int secondBackSlashIndex = location.lastIndexOf('/');
            String rscIds = location.substring(secondBackSlashIndex + 1);
            errorResourceIds.add(rscIds);
            bundleError.setErrorResourseId(rscIds);
        }
        
        // Extract resource ID from diagnostics field if location was not found
        if (issue.getLocation().isEmpty()) {
            String diagnostics = issue.getDiagnostics();
            int resourceIdIndex = diagnostics.indexOf("Resource ");
            if (resourceIdIndex != -1) {
                int endIndex = diagnostics.indexOf("-", resourceIdIndex);
                if (endIndex != -1) {
                    String rscIds = diagnostics.substring(resourceIdIndex + 9, endIndex);
                    errorResourceIds.add(rscIds);
                    bundleError.setErrorResourseId(rscIds);
                }
            }
        }
        
        // Set other error details
        bundleError.setAnthemBundleId(bundleId);
        bundleError.setBcbsaBundleId(Constants.NA);
        bundleError.setProviderResourseId(Constants.NA);
        bundleError.setErrorResourseType("Organization");
        bundleError.setBundleErrorResourseCode(String.valueOf(responseEntityStr.getStatusCodeValue()));
        bundleError.setBundleErrorResourseStatusCode(Constants.status_422);
        bundleError.setErrorResponseJson(responseEntityStr.getBody());
        bundleError.setBundleErrorResponseReasonDesc(issue.getDiagnostics());
        bundleError.setBundleRequestJson(jsonMainData);
        bundleError.setBundleErrorResponseDetail(Constants.NA);
        bundleError.setBundleSubmissionDtm(currentTimeStamp);
        bundleError.setErrorRtrvlDtm(currentTimeStamp);
        bundleError.setCrtcUserId(Constants.USER_ID);
        bundleError.setUpdtUserId(Constants.USER_ID);
        bundleError.setClvrlfLoadId(bundleError.hashCode());
        bundleErrorResponseList.add(bundleError);
    }
    
    // Update records based on errorResourceIds
    if (!CollectionUtils.isEmpty(errorResourceIds) && !CollectionUtils.isEmpty(bundleErrorResponseList)) {
        pdtItemService.updateAllorgRecordStatus(Constants.STATUS_FAILED, Constants.Status_OrgFailed, new Date(), errorResourceIds);
        pdtItemService.addingErrorDataIntoDB(bundleErrorResponseList);
        logger.error(bundleErrorResponseList + " Error data saved successfully for bundle Id " + bundleId);
    }
    
    // Update other records
    List<String> filteredLctnIds = organisationIds.stream().filter(id -> !errorResourceIds.contains(id)).collect(Collectors.toList());
    if (!CollectionUtils.isEmpty(filteredLctnIds)) {
        pdtItemService.updateAllorgRecordStatus(Constants.STATUS_YETTOSUBMIT, Constants.Status_OrgFailed, new Date(), filteredLctnIds);
    }
}
{
  "resourceType": "OperationOutcome",
  "issue": [
    {
      "severity": "error",
      "code": "invalid",
      "diagnostics": "Resource Organization/040-1b1fab4ad98b7b01dd05adea6af8399d-ProviderOrganiz, The value of National Provider Identifier (identifier[NPI].value) must correspond to a valid active value within the NPPES data for NPI Type 2 - Organization or for NPI Type 1 - Individual with Sole Proprietorship indicator  = Yes.",
      "location": [
        "Bundle.entry[20].resource.ofType(Organization)"
      ]
    }
  ]
}


{
  "resourceType": "OperationOutcome",
  "issue": [
    {
      "severity": "error",
      "code": "invalid",
      "diagnostics": "Resource Organization/040-9d5aae18ef831d75e7e95682542b5196-ProviderOrganiz, The value of National Provider Identifier (identifier[NPI].value) must correspond to a valid active value within the NPPES data for NPI Type 2 - Organization or for NPI Type 1 - Individual with Sole Proprietorship indicator  = Yes.",
      "location": [
        "Bundle.entry[2].resource.ofType(Organization)"
      ]
    }
  ]
}


{
  "resourceType": "OperationOutcome",
  "issue": [
    {
      "severity": "error",
      "code": "invalid",
      "diagnostics": "Resource Organization/040-e92a21c22a8ec6d1be9a66002bce508a-ProviderOrganiz, The value of National Provider Identifier (identifier[NPI].value) must correspond to a valid active value within the NPPES data for NPI Type 2 - Organization or for NPI Type 1 - Individual with Sole Proprietorship indicator  = Yes.",
      "location": [
        "Bundle.entry[21].resource.ofType(Organization)"
      ]
    }
  ]
}




else if((Constants.StatusCode422) == (responseEntityStr.getStatusCodeValue()))
				{
					FhirContext ctx = FhirContext.forR4();
					OperationOutcome operationOutcome = ctx.newJsonParser().parseResource(OperationOutcome.class,responseEntityStr.getBody()); 
					List<String> errorResourceIds = new ArrayList<>();
					for(OperationOutcomeIssueComponent issue : operationOutcome.getIssue()) {
						FhirBundleErrorResponse bundleError = new FhirBundleErrorResponse();
						String diagnostics = issue.getDiagnostics();
						int diagnosticsparseIndex = diagnostics.indexOf('(');
						String diagnosticsSubString = (diagnosticsparseIndex != -1) ?diagnostics.substring(0,diagnosticsparseIndex):diagnostics;
						String rscIds = null;
						if(!issue.getLocation().isEmpty()) {
						String location = issue.getLocation().get(0).getValue();
						int fisrtBackLashIndex = location.indexOf('/');
						int secondBackLashIndex = location.indexOf('/',fisrtBackLashIndex+1);
						int endIndex = location.indexOf("*",secondBackLashIndex+1);
						rscIds = location.substring(secondBackLashIndex+1,endIndex);
						errorResourceIds.add(rscIds);
						}
						bundleError.setAnthemBundleId(bundleId);
						bundleError.setBcbsaBundleId(Constants.NA);
						bundleError.setProviderResourseId(Constants.NA);
						bundleError.setErrorResourseId(rscIds); 
						bundleError.setErrorResourseType("Organization");
						bundleError.setBundleErrorResourseCode(String.valueOf(responseEntityStr.getStatusCodeValue()));
						bundleError.setBundleErrorResourseStatusCode(Constants.status_422);
						bundleError.setErrorResponseJson(responseEntityStr.getBody());
						bundleError.setBundleErrorResponseReasonDesc(diagnosticsSubString); 
						bundleError.setBundleRequestJson(jsonMainData);
						bundleError.setBundleErrorResponseDetail(Constants.NA);
						bundleError.setBundleSubmissionDtm(currentTimeStamp);
						bundleError.setErrorRtrvlDtm(currentTimeStamp);
						bundleError.setCrtcUserId(Constants.USER_ID);
						bundleError.setUpdtUserId(Constants.USER_ID);
						bundleError.setClvrlfLoadId(bundleError.hashCode());
						bundleErrorResponseList.add(bundleError);
					}
					if(!CollectionUtils.isEmpty(errorResourceIds)&&!CollectionUtils.isEmpty(bundleErrorResponseList) ) {
						pdtItemService.updateAllorgRecordStatus(Constants.STATUS_FAILED,Constants.
								Status_OrgFailed
								, new Date(), errorResourceIds);
						pdtItemService.addingErrorDataIntoDB(bundleErrorResponseList);
						logger.error(bundleErrorResponseList + "Error data saved successfully for bundle Id " + bundleId);
						}
					List<String> filteredLctnIds = organisationIds.stream().filter(id->!errorResourceIds.contains(id)).collect(Collectors.toList());
					if(!CollectionUtils.isEmpty(filteredLctnIds)) {
						pdtItemService.updateAllorgRecordStatus(Constants.STATUS_YETTOSUBMIT,Constants.
								Status_OrgFailed, new Date(), filteredLctnIds);
					}
						
				}


{
  "resourceType": "OperationOutcome",
  "issue": [
    {
      "extension": [
        {
          "url": "http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-line",
          "valueInteger": 1
        },
        {
          "url": "http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-col",
          "valueInteger": 33168
        }
      ],
      "severity": "error",
      "code": "processing",
      "diagnostics": "Rule organization-npi-1: 'The value of identifier[NPI].value (National Provider Identifier) must contain 10 numeric characters.' Failed",
      "location": [
        "Bundle.entry[36].resource/*Organization/040-d56ecd05e89b0b8209e8d471d6bc3ca3-ProviderOrganiz*/",
        "Line[1] Col[33168]"
      ]
    },
    {
      "extension": [
        {
          "url": "http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-line",
          "valueInteger": 1
        },
        {
          "url": "http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-col",
          "valueInteger": 32992
        },
        {
          "url": "http://hl7.org/fhir/StructureDefinition/operationoutcome-message-id",
          "valueString": "Validation_VAL_Profile_Minimum"
        }
      ],
      "severity": "error",
      "code": "processing",
      "details": {
        "coding": [
          {
            "system": "http://hl7.org/fhir/java-core-messageId",
            "code": "Validation_VAL_Profile_Minimum"
          }
        ]
      },
      "diagnostics": "Organization.identifier.value: minimum required = 1, but only found 0 (from http://bpd.bcbs.com/StructureDefinition/bpd-organization-provider-plan-submission|3.4.0.2)",
      "location": [
        "Bundle.entry[36].resource/*Organization/040-d56ecd05e89b0b8209e8d471d6bc3ca3-ProviderOrganiz*/.identifier[1]",
        "Line[1] Col[32992]"
      ]
    }
  ]
}
// Assuming this snippet is within a method that handles HTTP response processing

// Check if the status code is 422 and process accordingly
else if (Constants.StatusCode422 == responseEntityStr.getStatusCodeValue()) {
    FhirContext ctx = FhirContext.forR4();
    OperationOutcome operationOutcome = ctx.newJsonParser().parseResource(OperationOutcome.class, responseEntityStr.getBody());

    List<String> errorResourceIds = new ArrayList<>();
    
    for (OperationOutcomeIssueComponent issue : operationOutcome.getIssue()) {
        FhirBundleErrorResponse bundleError = new FhirBundleErrorResponse();

        String diagnostics = issue.getDiagnostics();
        // Parse diagnostics if needed
        String diagnosticsSubString = diagnostics; // Example, you might need to parse this

        // Extract resource ID from location
        String rscIds = null;
        if (!issue.getLocation().isEmpty()) {
            String location = issue.getLocation().get(0).getValue();
            int startIndex = location.indexOf("[");
            int endIndex = location.indexOf("]");
            if (startIndex != -1 && endIndex != -1) {
                rscIds = location.substring(startIndex + 1, endIndex);
                errorResourceIds.add(rscIds);
            }
        }

        // Set properties in bundleError object
        bundleError.setAnthemBundleId(bundleId);
        bundleError.setBcbsaBundleId(Constants.NA);
        bundleError.setProviderResourseId(Constants.NA);
        bundleError.setErrorResourseId(rscIds);
        bundleError.setErrorResourseType("Organization");
        bundleError.setBundleErrorResourseCode(String.valueOf(responseEntityStr.getStatusCodeValue()));
        bundleError.setBundleErrorResourseStatusCode(Constants.status_422);
        bundleError.setErrorResponseJson(responseEntityStr.getBody());
        bundleError.setBundleErrorResponseReasonDesc(diagnosticsSubString);
        bundleError.setBundleRequestJson(jsonMainData);
        bundleError.setBundleErrorResponseDetail(Constants.NA);
        bundleError.setBundleSubmissionDtm(currentTimeStamp);
        bundleError.setErrorRtrvlDtm(currentTimeStamp);
        bundleError.setCrtcUserId(Constants.USER_ID);
        bundleError.setUpdtUserId(Constants.USER_ID);
        bundleError.setClvrlfLoadId(bundleError.hashCode());

        bundleErrorResponseList.add(bundleError);
    }

    // Handle error resource IDs and update statuses
    if (!CollectionUtils.isEmpty(errorResourceIds) && !CollectionUtils.isEmpty(bundleErrorResponseList)) {
        pdtItemService.updateAllorgRecordStatus(Constants.STATUS_FAILED, Constants.Status_OrgFailed, new Date(), errorResourceIds);
        pdtItemService.addingErrorDataIntoDB(bundleErrorResponseList);
        logger.error(bundleErrorResponseList + " Error data saved successfully for bundle Id " + bundleId);
    }

    // Update statuses for other IDs not in errorResourceIds
    List<String> filteredLctnIds = organisationIds.stream().filter(id -> !errorResourceIds.contains(id)).collect(Collectors.toList());
    if (!CollectionUtils.isEmpty(filteredLctnIds)) {
        pdtItemService.updateAllorgRecordStatus(Constants.STATUS_YETTOSUBMIT, Constants.Status_OrgFailed, new Date(), filteredLctnIds);
    }
}
// Check if the status code is 422 and process accordingly
else if (Constants.StatusCode422 == responseEntityStr.getStatusCodeValue()) {
    FhirContext ctx = FhirContext.forR4();

    try {
        // Parse OperationOutcome
        OperationOutcome operationOutcome = ctx.newJsonParser().parseResource(OperationOutcome.class, responseEntityStr.getBody());

        List<String> errorResourceIds = new ArrayList<>();

        // Process each issue in OperationOutcome
        for (OperationOutcomeIssueComponent issue : operationOutcome.getIssue()) {
            FhirBundleErrorResponse bundleError = new FhirBundleErrorResponse();

            // Extract diagnostics
            String diagnostics = issue.getDiagnostics();
            String diagnosticsSubString = diagnostics != null ? diagnostics.split(":")[1].trim() : "NA";

            // Extract resource ID from location
            String rscIds = null;
            if (!issue.getLocation().isEmpty()) {
                String location = issue.getLocation().get(0).getValue();
                int startIndex = location.indexOf("[");
                int endIndex = location.indexOf("]");
                if (startIndex != -1 && endIndex != -1) {
                    rscIds = location.substring(startIndex + 1, endIndex);
                    errorResourceIds.add(rscIds);
                }
            }

            // Set properties in bundleError object
            bundleError.setAnthemBundleId(bundleId);
            bundleError.setBcbsaBundleId(Constants.NA);
            bundleError.setProviderResourseId(Constants.NA);
            bundleError.setErrorResourseId(rscIds);
            bundleError.setErrorResourseType("Organization");
            bundleError.setBundleErrorResourseCode(String.valueOf(responseEntityStr.getStatusCodeValue()));
            bundleError.setBundleErrorResourseStatusCode(Constants.status_422);
            bundleError.setErrorResponseJson(responseEntityStr.getBody());
            bundleError.setBundleErrorResponseReasonDesc(diagnosticsSubString);
            bundleError.setBundleRequestJson(jsonMainData);
            bundleError.setBundleErrorResponseDetail(Constants.NA);
            bundleError.setBundleSubmissionDtm(currentTimeStamp);
            bundleError.setErrorRtrvlDtm(currentTimeStamp);
            bundleError.setCrtcUserId(Constants.USER_ID);
            bundleError.setUpdtUserId(Constants.USER_ID);
            bundleError.setClvrlfLoadId(bundleError.hashCode());

            bundleErrorResponseList.add(bundleError);
        }

        // Handle error resource IDs and update statuses
        if (!errorResourceIds.isEmpty() && !bundleErrorResponseList.isEmpty()) {
            pdtItemService.updateAllorgRecordStatus(Constants.STATUS_FAILED, Constants.Status_OrgFailed, new Date(), errorResourceIds);
            pdtItemService.addingErrorDataIntoDB(bundleErrorResponseList);
            logger.error("Error data saved successfully for bundle Id " + bundleId);
        }

        // Update statuses for other IDs not in errorResourceIds
        List<String> filteredLctnIds = organisationIds.stream()
                .filter(id -> !errorResourceIds.contains(id))
                .collect(Collectors.toList());
        if (!filteredLctnIds.isEmpty()) {
            pdtItemService.updateAllorgRecordStatus(Constants.STATUS_YETTOSUBMIT, Constants.Status_OrgFailed, new Date(), filteredLctnIds);
        }
    } catch (Exception e) {
        // Handle parsing or processing exceptions
        logger.error("Error processing 422 response: " + e.getMessage());
        // Optionally, rethrow or handle the exception based on your application's error handling strategy
    }
}
