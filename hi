import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class YourServiceClassTest {

    @InjectMocks
    private YourServiceClass yourServiceClass; // The class under test

    @Mock
    private PdtItemService pdtItemService; // Mocking the dependency

    @Mock
    private ResponseEntityStr responseEntityStr; // Mocking the response entity
    @Mock
    private Bundle bundle; // Mocking the bundle

    private String bundleId;
    private List<String> resourceIds;
    private String jsonMainData;
    private String currentTimeStamp;
    private List<FhirBundleErrorResponse> bundleErrorResponseList;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        bundleId = "test-bundle-id";
        resourceIds = new ArrayList<>();
        resourceIds.add("test-resource-id");
        jsonMainData = "{\"key\":\"value\"}";
        currentTimeStamp = new Date().toString(); // or format accordingly
        bundleErrorResponseList = new ArrayList<>();
        
        // Initialize mocks with expected values
        when(responseEntityStr.getStatusCodeValue()).thenReturn(Constants.failed504Code);
        when(bundle.getEntry()).thenReturn(new ArrayList<>()); // Assume this returns an empty list for simplicity
    }

    @Test
    public void testHandleFailed504Code() {
        // Simulating a scenario where the response is a failed 504
        int j = 0; // Initialize j as in your code

        // Call the method you're testing (assuming it's named processResponse)
        yourServiceClass.processResponse(responseEntityStr, resourceIds, bundleId, jsonMainData, currentTimeStamp);
        
        // Validate the results
        assertEquals(1, bundleErrorResponseList.size());
        FhirBundleErrorResponse bundleError = bundleErrorResponseList.get(0);
        assertEquals(bundleId, bundleError.getAnthemBundleId());
        assertEquals(Constants.NA, bundleError.getBcbsaBundleId());
        assertEquals(Constants.NA, bundleError.getProviderResourseId());
        assertEquals(resourceIds.get(0), bundleError.getErrorResourseId());
        assertEquals(Constants.ERROR, bundleError.getBundleErrorResourseStatusCode());
        
        // Verify interaction with pdtItemService
        verify(pdtItemService).updateAllRecordStatuswithBndlID(Constants.FAILED_504_CODE, new Date(), bundleId, resourceIds);
        verify(pdtItemService).addingErrorDataIntoDB(bundleErrorResponseList);
    }

    @Test
    public void testHandleOtherStatusCode() {
        // Simulating a scenario where the response is not a failed 504
        when(responseEntityStr.getStatusCodeValue()).thenReturn(400); // Example of a different status code
        
        // Set up the bundle and its entries
        BundleEntryComponent entryComponent = mock(BundleEntryComponent.class);
        BundleEntryResponseComponent responseComponent = mock(BundleEntryResponseComponent.class);
        
        when(bundle.getEntry()).thenReturn(List.of(entryComponent));
        when(entryComponent.getResponse()).thenReturn(responseComponent);
        when(responseComponent.getStatus()).thenReturn("400 Bad Request");
        when(responseComponent.getLocation()).thenReturn("http://example.com/resource/1");
        
        // Call the method you're testing
        yourServiceClass.processResponse(responseEntityStr, resourceIds, bundleId, jsonMainData, currentTimeStamp);
        
        // Validate the results
        assertEquals(1, bundleErrorResponseList.size());
        FhirBundleErrorResponse bundleError =
